# version: 2.1

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here   
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             exit 1

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
# jobs:
#   build-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-build]
#       - run:
#           name: Build front-end
#           command: |
#             # Your code here
#             exit 1
#       - save_cache:
#           paths: [frontend/node_modules]
#           key: frontend-build

#   build-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       - run:
#           name: Back-end build
#           command: |
#              # Your code here
#              exit 1
#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-build

#   test-frontend:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       # Restore from cache
#       # Your job code here
                
#   test-backend:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       # Restore from cache
#       # Your job code here
            
#   scan-frontend:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       # Restore from cache
#       # Your job code here

#   scan-backend:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       # Restore from cache
#       # Your job code here

#   deploy-infrastructure:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Ensure back-end infrastructure exists
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/backend.yml \
#               #--tags project=your-tag \
#               # --stack-name "your back-end stack name with workflow id" \
#               # --parameter-overrides ID="your workflow id"  
#               exit 1
#       - run:
#           name: Ensure front-end infrastructure exist
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               #--tags project=your-tag \
#               # --stack-name "your front-end stack name with workflow id" \
#               # --parameter-overrides ID="your workflow id"  
#               exit 1
#       - run:
#           name: Add back-end ip to ansible inventory
#           command: |
#             # Your code here
#             exit 1
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt
#       # Here's where you will add some code to rollback on failure      

#   configure-infrastructure:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Configure server
#           command: |
#             # Your code here
#             exit 1
#       # Here's where you will add some code to rollback on failure      

#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#     steps:
#       # Checkout code from git
#       - run:
#           name: Run migrations
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Send migration results to memstash
#           command: |
#             # Your code here
#             exit 1
#      # Here's where you will add some code to rollback on failure      

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cleanup:
#       docker:
#         # Docker image here
#       steps:
#         # Checkout code from git
#         - run:
#             name: Get old stack workflow id
#             command: |
#               # your code here
#               export OldWorkflowID="the id here"
#               export STACKS=[] #put the list of stacks here
#         - run:
#             name: Remove old stacks and files
#             command: |
#               if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#               then
#                 # your code here
#               fi
            

# workflows:
#   default:
#     jobs:
#       - build-frontend
#       - build-backend
#       - test-frontend:
#           requires: [build-frontend]
#       - test-backend:
#           requires: [build-backend]
#       - scan-backend:
#           requires: [build-backend]
#       - scan-frontend:
#           requires: [build-frontend]
#       - deploy-infrastructure:
#           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#           filters:
#             branches:
#               only: [test-feature-branch]
#       - configure-infrastructure:
#           requires: [deploy-infrastructure]
#       - run-migrations:
#           requires: [configure-infrastructure]
#       - deploy-frontend:
#           requires: [run-migrations]
#       - deploy-backend:
#           requires: [run-migrations]
#       - smoke-test:
#           requires: [deploy-backend, deploy-frontend]
#       - cloudfront-update:
#           requires: [smoke-test]
#       - cleanup:
#           requires: [cloudfront-update]


# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# commands section
commands:
    # parameterized command
    print_pipeline_id:
      parameters:
        id: 
          type: string
      steps:
        - run: echo << parameters.id >>
  # unparameterized command
  # print_pipeline_id:
  #   steps:
  #     - run: echo ${CIRCLE_WORKFLOW_ID}

# Orchestrate or schedule a set of jobs
jobs:
  # job 1 (print_hello)
  print_hello:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo hello
  # job 2 (print_world)
  print_world:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo world
  # job 3 (print_nora)
  print_nora:
    docker:
      - image: cimg/base:2020.01
    steps:
      - run:
          name: "echo an env var that is part of our project"
          command: |
            echo ${MY_NAME_ENV_VAR}
  # job 4 (save_hello_world_output)
  save_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "hello world" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt
  # job 5 (print_output_file)
  print_output_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt
  # job 6 (print_pipeline_id - job with pre-defined command)
  print_pipeline_id:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id:
          id: << pipeline.id >>
      # - print_pipeline_id
  # job 7 (print_hello_with_failure_handling - job with a step that runs only upon failure/error of previous steps)
  print_hello_with_failure_handling:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: exit 1 # intentional failing to trigger on_fail handler (exiting with non-zero code) #or return 1
      - run:
          name: on error
          command: echo "Hello Error!"
          when: on_fail # "on_fail" filter (to run upon failure of previous steps)



workflows:
  # workflow name (my_first_workflow)
  my_first_workflow:
    jobs:
      # - print_hello
      # - print_world:
      #     requires:
      #       - print_hello
      #- print_nora

      # - save_hello_world_output
      # - print_output_file:
      #     requires:
      #       - save_hello_world_output

      # - print_pipeline_id

      - print_hello_with_failure_handling
